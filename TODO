todo
----

???: can we run "cap apt.select mongrel" ?

mike: deploy two apps and check if 'NameVirtualHost *:80' is required
mike: move enable/disable cdrom/universe into function in apt::
mike: setup trunk/branches/tags structure on svn
mike: slicehost, re-runnability, multi, 
mike: find out how to view checkins from cmdline
mike: setup alerts
mike: consistent shell environment - write it to .caprc and recipe to push
mike: setup svn repos and trac on modu1 (make multi and automate adding new)




do we need project locally

why isn't migrations working?
how do we rollback migrations?

make setup task find your keys and put them in ~/.caprc

put ubuntu functions into module
# XXX write function to enable/disable a service
# XXX update-rc.d lighttpd remove
# XXX update-rc.d -n httpd defaults

install_from_src() should take care of putting ';'s at the end of each command
instead of them being in the file_to_get hash.

do we want these? gem_plugin daemons

define groups
- system files
- application files

** movie **

# part one - the prep
- installing deprec
- deprec_dotfiles
- editing your own dotfile to:
  - specify ssh keys if you don't use default (~/.ssh/id_rsa)
    - ssh_options[:keys] = %w(/Users/mbailey/.ssh/id_dsa)
- create systemwide config file to require your favourite recipe gems:
  - cat "require 'deprec'" >> /etc/capistrano.conf
  - (cap show_tasks before and after to show new functions)
  - you can also require gems from within your own dotfile
- now you're free to move around outside of a project

# part two - setup a rails host
- putting full stack on one machine. explain reasons
  - apache mod_proxy_balancer
  - mongrel + mongrel cluster
  - rails
  - mysql

export HOSTS=10.11.12.13
cap setup_ssh_keys
cap install_rails_stack
cap install_rails_demo


# part three - deploy a project


# make new patch with /etc/capistrano.conf
# make standard cap rule to add/remove 'require' entry on dotfile

# decide on license


add autocomplete for commands

railsmachine
- use their generator but modify
- include their apache but modify
- recipes.rb
  - 
- recipes
  - mongrel 
    - load this myself
  - mysql.rb
    - run "mysql --user=root -p --execute=\"#{sql}\"" do |channel, stream, data|
      - should be user=user
    - sql += "GRANT ALL PRIVILEGES ON #{db_name}.* TO #{db_user}@localhost IDENTIFIED BY
      - should be {db_user}@{app_servers} - perhaps create an entry for for host?
                                          - but then what if we add more hosts?
  - svn
    - write my own svn. split up into smaller bits
  - apache
    - use theirs but modify

# release 0.1.0
format readme and changelog
desc "all tasks"
patch_capistrano_to_support_dotfile
- complete task
- put patch into resources



cap-get
write functions
- run_sh, sudo sh (or can we have a shell for cd'ing in?)
- 
find out how to do rdoc and do it for deprec
check code into rubyforge svn
explore rest of rubyforge

# later
setup local cache for source distributions
md5 check local version before pushing out
- sign recipes and run check before running them?

